# -*- coding: utf-8 -*-
"""Covid19_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CZ-c_W3cpYul8J4q8ttPdwm1dDMNFZJy
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.tree import DecisionTreeClassifier
df = pd.read_csv("/content/covid-19 symptoms dataset (1).csv")

df.head()

df =df[["fever","bodyPain","age","runnyNose","diffBreath","infectionProb"]]
df

df=df.rename({'infectionProb':'covid19_result'},axis=1)
df.head()

df=df[df['covid19_result'].notnull()]
df

df.info()

at=df['diffBreath']
at

def dificult_breath(categeory,threshold):
     catregeory_map={}
     for i in range(len(categeory)):
         if categeory[i]>threshold:  
            categeory[i]=1
         else:
            categeory[i]=0  
     return categeory

fe=dificult_breath(at,0)
df['diffBreath']= fe
df

def data_split(data,ratio):
    np.random.seed(100)
    shuffled = np.random.permutation(len(data))
    test_data_size = int(len(data)*ratio)
    test_data_indices = shuffled[: test_data_size]
    train_data_indices = shuffled[test_data_size :]
    return data.iloc[test_data_indices], data.iloc[train_data_indices]

test_data, train_data = data_split(df, 0.15)

train_data

test_data

x = train_data[['fever','bodyPain','age','runnyNose','diffBreath']].to_numpy()

x

x_test= test_data[['fever','bodyPain','age','runnyNose','diffBreath']].to_numpy()
x_test

y_train = train_data[['covid19_result']].to_numpy().reshape(2189, )
y_test = test_data[['covid19_result']].to_numpy().reshape(386, )

y_test

#x=df.drop("covid19_result",axis=1)
#y=df["covid19_result"]

#x

#y

from sklearn.linear_model import LogisticRegression
clflo = LogisticRegression()
clflo.fit(x, y_train)

clflo.predict_proba([[107,1,49,1,1]])

y_pred = clflo.predict_proba(x_test)
y_pred

from sklearn.metrics import log_loss
log_loss(y_test, y_pred)

clf = DecisionTreeClassifier()

# Train Decision Tree Classifer
clf = clf.fit(x, y_train)

#Predict the response for test dataset
y_pred = clf.predict(x_test)

print(y_pred)

from sklearn.ensemble import RandomForestClassifier

#Create a Gaussian Classifier
clf=RandomForestClassifier(n_estimators=100)

#Train the model using the training sets y_pred=clf.predict(X_test)
clf.fit(x,y_train)

y_pred=clf.predict(x_test)

print(y_pred)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(x, y_train)

y_pred = classifier.predict(x)

print(y_pred)

import pickle

pickle.dump(clflo,open('pickel_model.pkl','wb'))

model=pickle.load(open('pickel_model.pkl','rb'))